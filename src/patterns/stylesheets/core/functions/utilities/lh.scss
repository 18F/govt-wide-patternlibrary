@use "sass:list";
@use "sass:map";
@use "sass:math";
@use "../../functions/general/smart-quote" as *;
@use "../../functions/general/unpack" as *;
@use "../../tokens/font/line-height" as *;
@use "../../tokens/font/base-cap-height" as *;
@use "../../variables/project-cap-heights" as *;

@function lh($props...) {
  $props: unpack($props);

  @if not(list.length($props) == 2) {
    @error 'lh() needs both a valid face and line height token '
      + 'in the format `lh(FACE, HEIGHT)`.';
  }

  $family: smart-quote(nth($props, 1));
  $scale: smart-quote(nth($props, 2));

  @if not map.has-key($project-cap-heights, $family) {
    @error '#{$family} is not a valid font family token. '
      + 'Valid tokens: #{map.keys($project-cap-heights)}';
  }

  @if not map.get($system-line-height, $scale) {
    @error '`#{$scale}` is not a valid line-height token. '
      + 'Valid tokens: #{map.keys($system-line-height)}';
  }

  @if not map.get($project-cap-heights, $family) {
    @return false;
  }

  $this-cap: map.get($project-cap-heights, $family);
  $this-line-height: map.get($system-line-height, $scale);
  $normalized-line-height: $this-line-height /
    ($system-base-cap-height / $this-cap);
  $normalized-line-height: math.round($normalized-line-height * 10) / 10;

  @return $normalized-line-height;
}

@function line-height($props...) {
  @return lh($props...);
}

// @debug lh("sans", 2);
// @return 1.2;
// @debug lh("serif", 2);
// @return 1.1;
// @debug lh("heading", 2);
// @return 1.2;
