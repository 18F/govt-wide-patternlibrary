/*
----------------------------------------
color()
----------------------------------------
Derive a color from a color shortcode
----------------------------------------
*/
@use "sass:list";
@use "sass:map";
@use "sass:meta";
@use "sass:string";
@use "../../functions/general";
@use "../../settings/settings-color" as *;
@use "../../settings/settings-general" as *;
@use "../../tokens/color/shortcodes-color-system" as *;
@use "../../tokens/color/assignments-theme-color" as *;


@function color($value, $flags...) {
  $value: general.unpack($value);

  @if map.has-key($assignments-theme-color, $value) {
    $value: map.get($assignments-theme-color, $value);
    @if $value == false {
      @if list.index($flags, set-theme) {
        @return $value;
      }
      @error 'error: set to false';
    }
    @if meta.type-of($value) == string {
      $value: string.quote($value);
    }
  }

  // If it's a color, return that color
  // Withhold warning if "no-warn" flag

  @if meta.type-of($value) == color {
    @if list.index($flags, "override") or list.index($flags, "set-theme") {
      // override + no-warn will skip warnings
      @if list.index($flags, "no-warn") {
        @return "no-warn"
      }

      @if $theme-show-compile-warnings {
        @warn 'Override: `#{$value}` is not a USWDS color token.';
      }

      @return $value;
    }
  }

  // False values may be passed through when setting theme colors
  @if $value == false {
    @if list.index($flags, set-theme) {
      @return $value;
    }
  }

  // Now, any value should be evaluated as a token

  @if map.has-key($system-color-shortcodes, $value) {
    $value: general.smart-quote($value);
    $our-color: map.get($system-color-shortcodes, $value);
    @if $our-color == false {
      @error '`#{$value}` is a color that does not exist '
        + 'or is set to false.';
    }
    @return $our-color;
  }

  @error '`#{$value}` is not a valid USWDS color token. '
      + 'See designsystem.digital.gov/design-tokens/color '
      + 'for more information.';
}

@debug color("orange-80v");
// @return #352313;
@debug color("primary-dark");
// @return #1a4480;
@debug color($theme-color-accent-warm-dark);
// @return #c05600;
@debug color("info");
// @return #00bde3
@debug color(green, set-theme);
// @return Warning: Override: `green` is not a USWDS color token.
//@debug color(#f00);
// @return error: '"#f00" is not a valid USWDS color token. See designsystem.digital.gov/design-tokens/color for more information.'
// @debug color(orange);
// error: '"orange" is not a valid USWDS color token. See designsystem.digital.gov/design-tokens/color for more information.'
// @debug color(hamburgers);
// error: '"hamburgers" is not a valid USWDS color token. See designsystem.digital.gov/design-tokens/color for more information.'
// @debug color("primary-lightest");
// @return error: set to false;
// @debug color("primary-lightest", set-theme);
// @return false