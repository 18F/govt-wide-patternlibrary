/*
----------------------------------------
color()
----------------------------------------
Derive a color from a color shortcode
----------------------------------------
*/
@use "sass:list";
@use "sass:map";
@use "sass:meta";
@use "sass:string";
@use "../../functions/general";
@use "../../settings" as *;
@use "../../tokens/color/shortcodes-color-system" as *;
@use "../../tokens/color/assignments-theme-color" as *;

@function color($value, $flags...) {
  // Create lists of single items 
  $value: general.unpack($value);

  // If theme color is found, prepare that value to be parsed by $system-color-shortcodes
  @if map.has-key($assignments-theme-color, $value) {
    $value: map.get($assignments-theme-color, $value);
  }

  // If theme or system color is found, return that value
  @if map.has-key($system-color-shortcodes, $value) {
    $quote: general.smart-quote($value);
    $value: map.get($system-color-shortcodes, $value);
    @return $value;
  }

  // If not a theme or system color, check if there is an acceptable value that can be passed into the system via flags 
  // Acceptable values: False, non-token css color values 
  @if meta.type-of($value) == color or $value == false {
    @if list.index($flags, 'override') or list.index($flags, 'set-theme') {
      // override + no-warn will skip warnings
      @if list.index($flags, no-warn) {
        @return $value;
      }

      @if $theme-show-compile-warnings {
        @warn 'Override: `#{$value}` is not a USWDS color token.';
      }

      @return $value;
    }
  }

  // If no acceptable value found, return an error
  @return general.error-not-token($value, "color");
}

@debug color('orange-80v');
// @return #352313;
@debug color('primary-dark');
// @return #1a4480;
@debug color($theme-color-accent-warm-dark);
// @return #c05600;
@debug color('info');
// @return #00bde3
@debug color(orange, set-theme, no-warn);
// @return orange 
@debug color(#ff0, set-theme, no-warn);
// @return #ff0 
@debug color(rgba(0,0,0,1), set-theme, no-warn);
// @return black
@debug color(green, set-theme);
// @return green with Warning: Override: `green` is not a USWDS color token.
@debug color(green, override);
// @return green with Warning: Override: `green` is not a USWDS color token.
@debug color('primary-lightest', set-theme);
// @return false

// these should result in errors
// @debug color(green);
// error: '"green" is not a valid USWDS color token. See designsystem.digital.gov/design-tokens/color for more information.'
//@debug color(#f00);
// @return error: '"#f00" is not a valid USWDS color token. See designsystem.digital.gov/design-tokens/color for more information.'
// @debug color(hamburgers);
// error: '"hamburgers" is not a valid USWDS color token. See designsystem.digital.gov/design-tokens/color for more information.'
@debug color('primary-lightest');
// @return error: set to false;
