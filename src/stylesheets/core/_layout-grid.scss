/* stylelint-disable */

$namespace-grid: ns('grid');

// basic container
.#{$namespace-grid}container {
  @include maxw(desktop);
  @include margin-x(auto);
}

// container with custom widths
@each $width-key, $width-value in $uswds-breakpoints {
  .#{$namespace-grid}container-#{$width-key} {
    @include maxw($width-key);
    @include margin-x(auto);
  }
}

// responsive containers...
@each $mq-key, $mq-value in $uswds-breakpoints {
  @if map-get($theme-output-breakpoints, $mq-key) {
    @include at-media($mq-key){
      .#{$mq-key}\:#{$namespace-grid}container {
        @include maxw(desktop);
        @include margin-x(auto);
      }

// ...with custom widths
      @each $width-key, $width-value in $uswds-breakpoints {
        .#{$mq-key}\:#{$namespace-grid}container-#{$width-key} {
          @include maxw($width-key);
          @include margin-x(auto);
        }
      }
    }
  }
}

// basic row...
.#{$namespace-grid}row {
  @include display(flex);
  @include flex(wrap);

// ...that includes column gaps
  &.#{$namespace-grid}gap {
    @include margin-x(unquote("#{$neg-prefix}-#{calc-gap-offset($theme-column-gap)}"));
    > [class*='#{$namespace-grid}col'] {
      @include padding-x(calc-gap-offset($theme-column-gap));
    }
  }
  @each $gap-key, $gap-val in map-deep-get($uswds-properties, gap, standard){
    @if $gap-key {
      $gap-key: unquote($gap-key);
      &.#{$namespace-grid}gap-#{$gap-key} {
        @include margin-x(unquote("#{$neg-prefix}-#{calc-gap-offset($gap-val)}"));
        > [class*='#{$namespace-grid}col'] {
          @include padding-x(calc-gap-offset($gap-val));
        }
      }
    }
  }

// responsive column gaps
  @each $mq-key, $mq-value in $uswds-breakpoints {
    @if map-get($theme-output-breakpoints, $mq-key) {
      @include at-media($mq-key){
        &.#{$mq-key}\:#{$namespace-grid}gap {
          @include margin-x(unquote("#{$neg-prefix}-#{calc-gap-offset($theme-column-gap)}"));
          > [class*='#{$namespace-grid}col'] {
            @include padding-x(calc-gap-offset($theme-column-gap));
          }
        }
        @if $theme-column-gap-small {
          &.#{$mq-key}\:#{$namespace-grid}gap-sm {
            @include margin-x(unquote("#{$neg-prefix}-#{calc-gap-offset($theme-column-gap-small)}"));
            > [class*='#{$namespace-grid}col'] {
              @include padding-x(calc-gap-offset($theme-column-gap-small));
            }
          }
        }
        @if $theme-column-gap-large {
          &.#{$mq-key}\:#{$namespace-grid}gap-lg {
            @include margin-x(unquote("#{$neg-prefix}-#{calc-gap-offset($theme-column-gap-large)}"));
            > [class*='#{$namespace-grid}col'] {
              @include padding-x(calc-gap-offset($theme-column-gap-large));
            }
          }
        }
      }
    }
  }
}

// basic columns...
.#{$namespace-grid}col {
  @include flex(fill);
  @include width(auto);
}

.#{$namespace-grid}col-auto {
  @include flex(auto);
  @include width(auto);
}

.#{$namespace-grid}col-fill {
  @include flex(fill);
  @include width(auto);
}

// ...with widths
@each $width-key, $width-value in $uswds-layout-grid-widths {
  .#{$namespace-grid}col-#{$width-key} {
    @include width(override, $width-value);
  }
}

// responsive columns
@each $mq-key, $mq-value in $uswds-breakpoints {
  @if map-get($theme-output-breakpoints, $mq-key) {
    @include at-media($mq-key){
      .#{$mq-key}\:#{$namespace-grid}col {
        @include width(full);
      }
      .#{$mq-key}\:#{$namespace-grid}col-fill {
        @include flex(fill);
        @include width(auto);
      }
      .#{$mq-key}\:#{$namespace-grid}col-auto {
        @include flex(auto);
        @include width(auto);
      }

      @each $width-key, $width-value in $uswds-layout-grid-widths {
        .#{$mq-key}\:#{$namespace-grid}col-#{$width-key} {
          @include width(override, $width-value);
        }
      }
    }
  }
}

// basic offsets
@each $width-key, $width-value in $uswds-layout-grid-widths {
  .#{$namespace-grid}offset-#{$width-key} {
    @include margin-left(override, $width-value);
  }
}

// responsive offsets
@each $mq-key, $mq-value in $uswds-breakpoints {
  @if map-get($theme-output-breakpoints, $mq-key) {
    @each $width-key, $width-value in $uswds-layout-grid-widths {
      @include at-media($mq-key) {
        .#{$mq-key}\:#{$namespace-grid}offset-#{$width-key} {
          @include margin-left(override, $width-value);
        }
      }
    }
  }
}
/* stylelint-enable */
