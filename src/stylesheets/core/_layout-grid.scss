/* stylelint-disable */

$namespace-grid: ns('grid');
$is-important: false;
$grid-global: '';

@if $is-important {
  $grid-global: '!important';
}

// basic container
.#{$namespace-grid}container {
  $props: append-important($grid-global, desktop);
  @include grid-container($props);
}

// container with custom widths
@each $width-key, $width-value in $uswds-breakpoints {
  .#{$namespace-grid}container-#{$width-key} {
    $props: append-important($grid-global, $width-key);
    @include grid-container($props);
  }
}

// responsive containers...
@each $mq-key, $mq-value in $uswds-breakpoints {
  @if map-get($theme-output-breakpoints, $mq-key) {
    @include at-media($mq-key){
      .#{$mq-key}\:#{$namespace-grid}container {
        $props: append-important($grid-global, desktop);
        @include grid-container($props);
      }

// ...with custom widths
      @each $width-key, $width-value in $uswds-breakpoints {
        .#{$mq-key}\:#{$namespace-grid}container-#{$width-key} {
          $props: append-important($grid-global, $width-key);
          @include grid-container($props);
        }
      }
    }
  }
}

// basic row...
.#{$namespace-grid}row {
  @include grid-row;

// ...that includes column gaps
  &.#{$namespace-grid}gap {
    @include grid-gap;
  }
  @each $gap-key, $gap-val in map-deep-get($uswds-properties, gap, standard){
    @if $gap-key {
      &.#{$namespace-grid}gap-#{$gap-key} {
        @include grid-gap($gap-key);
      }
    }
  }

// responsive column gaps
  @each $mq-key, $mq-value in $uswds-breakpoints {
    @if map-get($theme-output-breakpoints, $mq-key) {
      @include at-media($mq-key){
        &.#{$mq-key}\:#{$namespace-grid}gap {
          @include grid-gap;
        }
        @if $theme-column-gap-small {
          &.#{$mq-key}\:#{$namespace-grid}gap-sm {
            @include grid-gap('sm');
          }
        }
        @if $theme-column-gap-large {
          &.#{$mq-key}\:#{$namespace-grid}gap-lg {
            @include grid-gap('lg');
          }
        }
      }
    }
  }
}

// basic columns...
[class*='#{$namespace-grid}col'] {
  @include u-minh(1px);
  @include u-position(relative);
  @include u-width(full);
}

.#{$namespace-grid}col {
  @include grid-col;
}

.#{$namespace-grid}col-auto {
  @include grid-col('auto');
}

.#{$namespace-grid}col-fill {
  @include grid-col('fill');
}

// ...with widths
@each $width-key, $width-value in $uswds-layout-grid-widths {
  .#{$namespace-grid}col-#{$width-key} {
    @include grid-col($width-key);
  }
}

// responsive columns
@each $mq-key, $mq-value in $uswds-breakpoints {
  @if map-get($theme-output-breakpoints, $mq-key) {
    @include at-media($mq-key){
      .#{$mq-key}\:#{$namespace-grid}col {
        @include grid-col;
      }
      .#{$mq-key}\:#{$namespace-grid}col-fill {
        @include grid-col('fill');
      }
      .#{$mq-key}\:#{$namespace-grid}col-auto {
        @include grid-col('auto');
      }

      @each $width-key, $width-value in $uswds-layout-grid-widths {
        .#{$mq-key}\:#{$namespace-grid}col-#{$width-key} {
          @include grid-col($width-key);
        }
      }
    }
  }
}

// basic offsets
@each $width-key, $width-value in $uswds-layout-grid-widths {
  .#{$namespace-grid}offset-#{$width-key} {
    @include grid-offset($width-key);
  }
}

// responsive offsets
@each $mq-key, $mq-value in $uswds-breakpoints {
  @if map-get($theme-output-breakpoints, $mq-key) {
    @each $width-key, $width-value in $uswds-layout-grid-widths {
      @include at-media($mq-key) {
        .#{$mq-key}\:#{$namespace-grid}offset-#{$width-key} {
          @include grid-offset($width-key);
        }
      }
    }
  }
}
/* stylelint-enable */
